data_path='TestPort.csv'
trade_plan_path='MasterConfigData\ListTradeTran.xlsx'
trade_sheet='Test2'

asset_comm_path='MasterConfigData\AssetInfo.xlsx'
result_path=f'ReportData\ReportTestPort_{trade_sheet}.xlsx'
import pandas as pd
import numpy as np
from datetime import datetime


------------------------------------------------------------------


# df=pd.read_csv('ASP-SME_KKP-SM-TRade.csv',index_col='Date/Time',parse_dates=['Date/Time'],dayfirst=True)
df=pd.read_csv(data_path,parse_dates=['Date/Time'],dayfirst=True)
# df.index.set_names('date',inplace=True)
df.columns=['symbol','date','price']

list_symbols=df['symbol'].unique()

#list_symbols=['KKP-SM-CAP','ASP-SME']
print(list_symbols)
df.info()
print(df.tail())

-------------------------------------------------------------------------
dfPlan=pd.read_excel(trade_plan_path,engine="openpyxl",sheet_name=trade_sheet, \
                     parse_dates=['trade_date'],dtype ={'portion_pct': np.float64})
dfAssetInfo=pd.read_excel(asset_comm_path,engine="openpyxl",sheet_name='AssetInfo',\
                    index_col='symbol', dtype ={'buy_comm_pct': np.float64,'sell_comm_pct': np.float64})

tradeDateList= [ d for d in list(dfPlan['trade_date']) ]

print(tradeDateList)
print("================================================================================================")

print(dfPlan)
print(dfAssetInfo)
----------------------------------------------------------------------------

# veridf  there are both buy and sell if no sell
#we have to add last reord 100 % as of last dat in Amibroker database
buy_sum_act=dfPlan.query("action=='b'").portion_pct.sum()
sell_sum_act=dfPlan.query("action=='s'").portion_pct.sum()
all_portion=0
if buy_sum_act!=sell_sum_act:
    raise Exception("No.Action Buy and Sell  must be the same.")
else:
    all_portion=buy_sum_act   
    print(f"portion = {all_portion} on")
    


# day is ordering ? in plan

# verify sum buy =sum sell

# veriry all list in data price are in commision

----------------------------------------------------------

TotalBudget=150000
rrr=TotalBudget % all_portion
if rrr !=0 :
  raise Exception("Budet % Portion is not xxxx")
else:
  print(rrr)

------------------------------

def set_commision_by_action(item):
  x=item['symbol']  
  if item['action']=='b':
    comm_type='buy_comm_pct'
  elif  item['action']=='s':
    comm_type='sell_comm_pct'
  try:
     return dfAssetInfo.loc[x,comm_type]
  except Exception as ex:
     print(f"Error : no {x} to get commission")
     return 0
def get_qty_buy(item):
    xCost=(item['portion_pct']/all_portion)*TotalBudget
    xPrice=item['price_on_comm']
    qty=xCost/xPrice
    return qty
def get_qty_sell(item,TotalQty):
    qty=(item['portion_pct']/all_portion)*TotalQty
    return qty
------------------------



dict_dfTran={}
dfSummary=pd.DataFrame(columns=['Symbol','BuyValue','AvgBuyPrice','SellValue','AvgSellPrice','PL','Percent_PL'])
for symbol in list_symbols:
    print(symbol)
    dfBS=df[ (df['symbol']==symbol) & (df['date'].isin(tradeDateList))]
    dfBS=dfBS.merge(dfPlan,how='inner',left_on='date',right_on='trade_date')
    
    dfBS['comm']=dfBS.apply(set_commision_by_action,axis=1)
    dfBS['price_on_comm']=dfBS.apply(lambda item : item['price']*(1+ (item['comm']/100)) if item['action']=='b' else item['price']*(1-(item['comm']/100)), axis=1)
    dfBS['price_on_comm']=dfBS['price_on_comm'].round(2)
    
    dfBS=dfBS.drop(columns=['trade_date'])
    #print(dfBS)
    
    print("================Buy=================")
    buyDF=dfBS.query("action=='b'")    
    # cal qury and actual value and  total_val and totl qury
    buyDF['qty']=buyDF.apply(get_qty_buy,axis=1)
    buyDF['value']=buyDF['qty']*buyDF['price_on_comm']
    buyDF['action_value']=buyDF['value']
    buyDF['action_qty']=buyDF['qty']
    print(buyDF[['date' ,'price_on_comm','qty','value','portion_pct']])
    
    TotalQty=buyDF['qty'].sum()
    TotalValue=round(buyDF['value'].sum(),2)
    AvgPrice=round(TotalValue/TotalQty,2)
    # print(f"Total Buy {symbol} : qty={TotalQty} and value={TotalValue} at AvgPrice={AvgPrice}")
    
    print("=================Sell=================")
    sellDF=dfBS.query("action=='s'")  
    sellDF['qty']=sellDF.apply(get_qty_sell,axis=1,args=(TotalQty,))
    sellDF['value']=sellDF['qty']*sellDF['price_on_comm']
    sellDF['action_value']=sellDF['value']*-1
    sellDF['action_qty']=sellDF['qty']*-1
    print(sellDF[['date' ,'price_on_comm','qty','value','portion_pct']])
    
    SellTotalQty=sellDF['qty'].sum()
    SellTotalValue=round(sellDF['value'].sum(),2)
    SellAvgPrice=round(SellTotalValue/SellTotalQty,2)
    
    # print(f"Total Sell {symbol} : qty={SellTotalQty} and value={SellTotalValue} at AvgPrice={SellAvgPrice}")
    
    PL=round(SellTotalValue-TotalValue,0)
    PCT_PL=round(PL/TotalValue*100,2)
    
    summary_data={'Symbol':symbol,'BuyValue':TotalValue,'AvgBuyPrice':AvgPrice,'SellValue':SellTotalValue,'AvgSellPrice':SellAvgPrice, \
                  'PL':PL,'Percent_PL':PCT_PL
                 }
    dfSummary=dfSummary.append(summary_data,ignore_index=True)
    
    dfTran=pd.concat([buyDF,sellDF],axis=0)
    dfTran=dfTran.sort_values(by=['date'])
    dfTran[['value','action_value']]=dfTran[['value','action_value']].round(0)
    
    dict_dfTran[symbol]=dfTran
    


-----------------------------

for symbol,tranDF in dict_dfTran.items():
  tranDF['net_value']=tranDF['action_value'].cumsum(axis = 0) 
  tranDF['net_qty']=tranDF['action_qty'].cumsum(axis = 0)  
  tranDF['avg_price']=round( tranDF['net_value']/tranDF['net_qty'])
  tranDF=tranDF.sort_values(by=['date'])
  print(tranDF[['date' ,'action','price_on_comm','qty','net_qty','value','net_value','avg_price']])
------------------------------------------------

writer=pd.ExcelWriter(result_path,engine='xlsxwriter') 
dfSummary=dfSummary.sort_values(by=['Percent_PL'],ascending=False)
dfSummary.to_excel(writer, sheet_name="Summary",index=False)
print(dfSummary)
for symbol,tranDF in dict_dfTran.items():
 tranDF.to_excel(writer, sheet_name=symbol,index=False) 
 #print(tranDF)
writer.save()

writer.close()

print("Successfully")
